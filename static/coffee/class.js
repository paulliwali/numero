// Generated by CoffeeScript 1.8.0
var Block, Dice, Game, Grid, Orientation, Player, Position, Size,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Game = (function() {
  function Game() {
    console.log("New Game created.");
  }

  return Game;

})();

Grid = (function() {
  Grid.size = null;

  Grid.blockArray = null;

  function Grid(size) {
    this.size = size;
    this.createGrid = __bind(this.createGrid, this);
    if (this.size === null) {
      console.log("CANNOT CREATE GRID. MISSING SIZE OBJECT.");
      return;
    }
    this.blockArray = [[]];
    console.log("New Grid created: (" + this.size.height + "," + this.size.width + ")");
  }

  Grid.prototype.createGrid = function() {
    var block, blockElement, grid, heightBlock, row, widthBlock, _i, _j, _ref, _ref1;
    if (this.size.unit === UNIT_PIXEL) {
      grid = $("<div>");
      grid.width(this.size.getWidthWithUnit());
      grid.height(this.size.getWidthWithUnit());
      ELEMENT_BOARD_CONTAINER.append(grid);
    } else if (this.size.unit === UNIT_BLOCK) {
      console.log("Creating A " + this.size.width + " by " + this.size.height + " grid of Blocks.");
      for (widthBlock = _i = 0, _ref = this.size.width; 0 <= _ref ? _i < _ref : _i > _ref; widthBlock = 0 <= _ref ? ++_i : --_i) {
        row = $("<div class='block-row'>");
        this.blockArray[widthBlock] = [];
        for (heightBlock = _j = 0, _ref1 = this.size.height; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; heightBlock = 0 <= _ref1 ? ++_j : --_j) {
          block = new Block(new Size(BLOCK_DEFAULT_WIDTH_PIXEL, BLOCK_DEFAULT_HEIGHT_PIXEL, UNIT_PIXEL));
          blockElement = block.createBlock();
          blockElement.text("[" + widthBlock + "," + heightBlock + "]");
          block.assignHTMLBlock(blockElement);
          row.append(blockElement);
          this.blockArray[widthBlock][heightBlock] = block;
        }
        ELEMENT_BOARD_CONTAINER.append(row);
      }
    }
    return {
      getGrid: (function(_this) {
        return function() {
          return console.log(_this.blockArray);
        };
      })(this)
    };
  };

  return Grid;

})();

Block = (function() {
  Block.size = null;

  Block.htmlBlock = null;

  function Block(size) {
    this.size = size;
    this.assignHTMLBlock = __bind(this.assignHTMLBlock, this);
    this.createBlock = __bind(this.createBlock, this);
    console.log("New Block Created: (" + this.size.height + "," + this.size.width + ")");
  }

  Block.prototype.createBlock = function() {
    var block;
    if (this.size.unit === UNIT_PIXEL) {
      block = $("<div class='block'>");
      block.width(this.size.getWidthWithUnit());
      block.height(this.size.getWidthWithUnit());
      return block;
    }
  };

  Block.prototype.assignHTMLBlock = function(block) {
    return this.htmlBlock = block;
  };

  return Block;

})();

Dice = (function(_super) {
  var getDown, getFaceUp, getLeft, getRight, getUp, moveDown, moveLeft, moveRight, moveUp;

  __extends(Dice, _super);

  Dice.bottomPosition = null;

  Dice.gridIndex_X = null;

  Dice.gridIndex_Y = null;

  Dice.orientation = null;

  function Dice(size) {
    this.getSize = __bind(this.getSize, this);
    Dice.__super__.constructor.call(this, size);
    this.orientation = new Orientation;
    console.log("New Dice created");
  }

  Dice.prototype.getSize = function() {
    return console.log(this.size);
  };

  getFaceUp = function() {
    return Dice.orientation.faceup;
  };

  getUp = function() {
    return Dice.orientation.up;
  };

  getDown = function() {
    return Dice.orientation.down;
  };

  getLeft = function() {
    return Dice.orientation.left;
  };

  getRight = function() {
    return Dice.orientation.right;
  };

  moveUp = function() {
    var oldFaceUp;
    oldFaceUp = Dice.orientation.faceup;
    Dice.orientation.faceup = Dice.orientation.down;
    Dice.orientation.bottom = 7 - Dice.orientation.faceup;
    Dice.orientation.up = oldFaceUp;
    Dice.orientation.down = 7 - Dice.orientation.up;
    Dice.gridIndex_Y = Dice.gridIndex_Y + 1;
    console.log("Dice moved up");
    console.log("New orientation is:");
    console.log("FACEUP: " + Dice.faceup);
    console.log("BOTTOM: " + Dice.bottom);
    console.log("LEFT: " + Dice.left);
    console.log("RIGHT: " + Dice.right);
    console.log("UP: " + Dice.up);
    return console.log("DOWN: " + Dice.down);
  };

  moveDown = function() {
    var oldFaceUp;
    oldFaceUp = Dice.orientation.faceup;
    Dice.orientation.faceup = Dice.orientation.up;
    Dice.orientation.bottom = 7 - Dice.orientation.faceup;
    Dice.orientation.down = oldFaceUp;
    Dice.orientation.up = 7 - Dice.orientation.down;
    Dice.gridIndex_Y = Dice.gridIndex_Y - 1;
    console.log("Dice moved down");
    console.log("New orientation is:");
    console.log("FACEUP: " + Dice.faceup);
    console.log("BOTTOM: " + Dice.bottom);
    console.log("LEFT: " + Dice.left);
    console.log("RIGHT: " + Dice.right);
    console.log("UP: " + Dice.up);
    return console.log("DOWN: " + Dice.down);
  };

  moveLeft = function() {
    var oldFaceUp;
    oldFaceUp = Dice.orientation.faceup;
    Dice.orientation.faceup = Dice.orientation.right;
    Dice.orientation.bottom = 7 - Dice.orientation.faceup;
    Dice.orientation.left = oldFaceUp;
    Dice.orientation.right = 7 - oldFaceUp;
    Dice.gridIndex_X = gridIndex_X - 1;
    console.log("Dice moved left");
    console.log("New orientation is:");
    console.log("FACEUP: " + Dice.faceup);
    console.log("BOTTOM: " + Dice.bottom);
    console.log("LEFT: " + Dice.left);
    console.log("RIGHT: " + Dice.right);
    console.log("UP: " + Dice.up);
    return console.log("DOWN: " + Dice.down);
  };

  moveRight = function() {
    var oldFaceUp;
    oldFaceUp = Dice.orientation.faceup;
    Dice.orientation.faceup = Dice.orientation.left;
    Dice.orientation.bottom = 7 - Dice.orientation.faceup;
    Dice.orientation.right = oldFaceUp;
    Dice.orientation.left = 7 - oldFaceUp;
    Dice.gridIndex_X = Dice.gridIndex_X + 1;
    console.log("Dice moved right");
    console.log("New orientation is:");
    console.log("FACEUP: " + Dice.faceup);
    console.log("BOTTOM: " + Dice.bottom);
    console.log("LEFT: " + Dice.left);
    console.log("RIGHT: " + Dice.right);
    console.log("UP: " + Dice.up);
    return console.log("DOWN: " + Dice.down);
  };

  return Dice;

})(Block);

Size = (function() {
  Size.height = null;

  Size.width = null;

  Size.unit = null;

  function Size(height, width, unit) {
    this.height = height;
    this.width = width;
    this.unit = unit;
    this.getHeightWithUnit = __bind(this.getHeightWithUnit, this);
    this.getWidthWithUnit = __bind(this.getWidthWithUnit, this);
    if ((this.height == null) || (this.width == null)) {
      if (this.height == null) {
        console.log("MISSING HEIGHT OBJECT");
      }
      if (this.width == null) {
        console.log("MISSING WIDTH OBJECT");
      }
      return;
    }
    console.log("New Size created: (" + this.height + "," + this.width + ")");
  }

  Size.prototype.getWidthWithUnit = function() {
    return this.width + this.unit;
  };

  Size.prototype.getHeightWithUnit = function() {
    return this.height + this.unit;
  };

  return Size;

})();

Position = (function() {
  Position.x = null;

  Position.y = null;

  function Position(x, y) {
    this.x = x;
    this.y = y;
    if (this.x === null || this.y === null) {
      if (this.x == null) {
        console.log("MISSING X VARIABLE");
      }
      if (this.y == null) {
        console.log("MISSING Y VARIABLE");
      }
      return;
    }
    console.log("New Position created: (" + this.x + "," + this.y + ")");
  }

  return Position;

})();

Player = (function() {
  function Player(name) {
    this.name = name;
    if (this.name === null || this.name === "") {
      console.log("MISSING PLAYER NAME");
      return;
    }
    console.log("New Player created: " + this.name);
  }

  return Player;

})();

Orientation = (function() {
  Orientation.faceup = null;

  Orientation.bottom = null;

  Orientation.down = null;

  Orientation.up = null;

  Orientation.left = null;

  Orientation.right = null;

  function Orientation(faceup, bottom, down, up, left, right) {
    this.faceup = faceup;
    this.bottom = bottom;
    this.down = down;
    this.up = up;
    this.left = left;
    this.right = right;
    if (this.faceup === null || this.bottom === null || this.down === null || this.up === null || this.left === null || this.right === null) {
      if (this.faceup == null) {
        console.log("MISSING FACEUP");
      }
      if (this.bottom == null) {
        console.log("MISSING BOTTOM");
      }
      if (this.down == null) {
        console.log("MISSING DOWN");
      }
      if (this.up == null) {
        console.log("MISSING UP");
      }
      if (this.left == null) {
        console.log("MISSING LEFT");
      }
      if (this.right == null) {
        console.log("MISSING RIGHT");
      }
    }
    this.faceup = randomNum(6, 1);
    this.bottom = 7 - this.faceup;
    this.left = randomNum(6, 1);
    while (this.left === this.faceup || this.left === this.bottom) {
      this.left = randomNum(6, 1);
    }
    this.right = 7 - this.left;
    this.up = randomNum(6, 1);
    while (this.up === this.faceup || this.up === this.bottom || this.up === this.left || this.up === this.right) {
      this.up = randomNum(6, 1);
    }
    this.down = 7 - this.up;
    console.log("New Orientation Created");
    console.log("FACEUP: " + this.faceup);
    console.log("BOTTOM: " + this.bottom);
    console.log("LEFT: " + this.left);
    console.log("RIGHT: " + this.right);
    console.log("UP: " + this.up);
    console.log("DOWN: " + this.down);
  }

  return Orientation;

})();
