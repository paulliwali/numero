// Generated by CoffeeScript 1.7.1
(function() {
  var Block, Dice, Game, Grid, Orientation, Player, Position, Size,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Game = (function() {
    function Game() {
      console.log("New Game created.");
    }

    return Game;

  })();

  Grid = (function() {
    Grid.size = null;

    function Grid(size) {
      this.size = size;
      if (this.size === null) {
        console.log("MISSING SIZE OBJECT");
        return;
      }
      console.log("New Grid created: (" + this.size.height + "," + this.size.width + ")");
    }

    return Grid;

  })();

  Block = (function() {
    Block.size = null;

    function Block(size) {
      this.size = size;
      console.log("New Block Created: (" + this.size.height + "," + this.size.width + ")");
    }

    return Block;

  })();

  Dice = (function(_super) {
    __extends(Dice, _super);

    Dice.bottomPosition = null;

    Dice.gridIndex_X = null;

    Dice.gridIndex_Y = null;

    Dice.orientation = null;

    function Dice(size) {
      this.getSize = __bind(this.getSize, this);
      Dice.__super__.constructor.call(this, size);
      console.log("New Dice created");
    }

    Dice.prototype.getSize = function() {
      return console.log(this.size);
    };

    return Dice;

  })(Block);

  Size = (function() {
    Size.height = null;

    Size.width = null;

    function Size(height, width) {
      this.height = height;
      this.width = width;
      if ((this.height == null) || (this.width == null)) {
        if (this.height == null) {
          console.log("MISSING HEIGHT OBJECT");
        }
        if (this.width == null) {
          console.log("MISSING WIDTH OBJECT");
        }
        return;
      }
      console.log("New Size created: (" + this.height + "," + this.width + ")");
    }

    return Size;

  })();

  Position = (function() {
    Position.x = null;

    Position.y = null;

    function Position(x, y) {
      this.x = x;
      this.y = y;
      if (this.x === null || this.y === null) {
        if (this.x == null) {
          console.log("MISSING X VARIABLE");
        }
        if (this.y == null) {
          console.log("MISSING Y VARIABLE");
        }
        return;
      }
      console.log("New Position created: (" + this.x + "," + this.y + ")");
    }

    return Position;

  })();

  Player = (function() {
    function Player(name) {
      this.name = name;
      if (this.name === null || this.name === "") {
        console.log("MISSING PLAYER NAME");
        return;
      }
      console.log("New Player created: " + this.name);
    }

    return Player;

  })();

  Orientation = (function() {
    function Orientation() {
      console.log("New Orientation Created");
    }

    return Orientation;

  })();

  $(function() {
    return FastClick.attach(document.body);
  });

  $(function() {
    var block, dice, grid, player, size;
    size = new Size(100, 100);
    block = new Block(size);
    dice = new Dice(size);
    player = new Player("Tom");
    grid = new Grid(size);
    return dice.getSize();
  });

}).call(this);
