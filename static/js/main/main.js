// Generated by CoffeeScript 1.7.1
(function() {
  var BLOCK_DEFAULT_HEIGHT_PIXEL, BLOCK_DEFAULT_WIDTH_PIXEL, Block, Dice, ELEMENT_BOARD_CONTAINER, ELEMENT_GAME_CONTAINER, Game, Grid, Orientation, Player, Position, Size, UNIT_BLOCK, UNIT_PIXEL,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Game = (function() {
    function Game() {
      console.log("New Game created.");
    }

    return Game;

  })();

  Grid = (function() {
    Grid.size = null;

    Grid.blockArray = null;

    function Grid(size) {
      this.size = size;
      this.createGrid = __bind(this.createGrid, this);
      if (this.size === null) {
        console.log("CANNOT CREATE GRID. MISSING SIZE OBJECT.");
        return;
      }
      this.blockArray = [[]];
      console.log("New Grid created: (" + this.size.height + "," + this.size.width + ")");
    }

    Grid.prototype.createGrid = function() {
      var block, blockElement, grid, heightBlock, row, widthBlock, _i, _j, _ref, _ref1;
      if (this.size.unit === UNIT_PIXEL) {
        grid = $("<div>");
        grid.width(this.size.getWidthWithUnit());
        grid.height(this.size.getWidthWithUnit());
        ELEMENT_BOARD_CONTAINER.append(grid);
      } else if (this.size.unit === UNIT_BLOCK) {
        console.log("Creating A " + this.size.width + " by " + this.size.height + " grid of Blocks.");
        for (widthBlock = _i = 0, _ref = this.size.width; 0 <= _ref ? _i < _ref : _i > _ref; widthBlock = 0 <= _ref ? ++_i : --_i) {
          row = $("<div class='block-row'>");
          this.blockArray[widthBlock] = [];
          for (heightBlock = _j = 0, _ref1 = this.size.height; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; heightBlock = 0 <= _ref1 ? ++_j : --_j) {
            block = new Block(new Size(BLOCK_DEFAULT_WIDTH_PIXEL, BLOCK_DEFAULT_HEIGHT_PIXEL, UNIT_PIXEL));
            blockElement = block.createBlock();
            blockElement.text("[" + widthBlock + "," + heightBlock + "]");
            row.append(blockElement);
            this.blockArray[widthBlock][heightBlock] = block;
          }
          ELEMENT_BOARD_CONTAINER.append(row);
        }
      }
      return {
        getGrid: (function(_this) {
          return function() {
            return console.log(_this.blockArray);
          };
        })(this)
      };
    };

    return Grid;

  })();

  Block = (function() {
    Block.size = null;

    function Block(size) {
      this.size = size;
      this.createBlock = __bind(this.createBlock, this);
      console.log("New Block Created: (" + this.size.height + "," + this.size.width + ")");
    }

    Block.prototype.createBlock = function() {
      var block;
      if (this.size.unit === UNIT_PIXEL) {
        block = $("<div class='block'>");
        block.width(this.size.getWidthWithUnit());
        block.height(this.size.getWidthWithUnit());
        return block;
      }
    };

    return Block;

  })();

  Dice = (function(_super) {
    __extends(Dice, _super);

    Dice.bottomPosition = null;

    Dice.gridIndex_X = null;

    Dice.gridIndex_Y = null;

    Dice.orientation = null;

    function Dice(size) {
      this.getSize = __bind(this.getSize, this);
      Dice.__super__.constructor.call(this, size);
      console.log("New Dice created");
    }

    Dice.prototype.getSize = function() {
      return console.log(this.size);
    };

    return Dice;

  })(Block);

  Size = (function() {
    Size.height = null;

    Size.width = null;

    Size.unit = null;

    function Size(height, width, unit) {
      this.height = height;
      this.width = width;
      this.unit = unit;
      this.getHeightWithUnit = __bind(this.getHeightWithUnit, this);
      this.getWidthWithUnit = __bind(this.getWidthWithUnit, this);
      if ((this.height == null) || (this.width == null)) {
        if (this.height == null) {
          console.log("MISSING HEIGHT OBJECT");
        }
        if (this.width == null) {
          console.log("MISSING WIDTH OBJECT");
        }
        return;
      }
      console.log("New Size created: (" + this.height + "," + this.width + ")");
    }

    Size.prototype.getWidthWithUnit = function() {
      return this.width + this.unit;
    };

    Size.prototype.getHeightWithUnit = function() {
      return this.height + this.unit;
    };

    return Size;

  })();

  Position = (function() {
    Position.x = null;

    Position.y = null;

    function Position(x, y) {
      this.x = x;
      this.y = y;
      if (this.x === null || this.y === null) {
        if (this.x == null) {
          console.log("MISSING X VARIABLE");
        }
        if (this.y == null) {
          console.log("MISSING Y VARIABLE");
        }
        return;
      }
      console.log("New Position created: (" + this.x + "," + this.y + ")");
    }

    return Position;

  })();

  Player = (function() {
    function Player(name) {
      this.name = name;
      if (this.name === null || this.name === "") {
        console.log("MISSING PLAYER NAME");
        return;
      }
      console.log("New Player created: " + this.name);
    }

    return Player;

  })();

  Orientation = (function() {
    function Orientation() {
      console.log("New Orientation Created");
    }

    return Orientation;

  })();

  ELEMENT_GAME_CONTAINER = $(".game-container");

  ELEMENT_BOARD_CONTAINER = $(".board-container");

  UNIT_PIXEL = "px";

  UNIT_BLOCK = "block";

  BLOCK_DEFAULT_WIDTH_PIXEL = "50";

  BLOCK_DEFAULT_HEIGHT_PIXEL = "50";

  $(function() {
    return FastClick.attach(document.body);
  });

  $(function() {
    var blockSize, grid;
    blockSize = new Size(6, 6, UNIT_BLOCK);
    grid = new Grid(blockSize);
    grid.createGrid();
    return console.log(grid.blockArray);
  });

}).call(this);
