// Generated by CoffeeScript 1.7.1
(function() {
  var BLOCK_DEFAULT_HEIGHT_PIXEL, BLOCK_DEFAULT_WIDTH_PIXEL, BOARD_SIZE_LARGE, BOARD_SIZE_MEDIUM, BOARD_SIZE_RANDOM, BOARD_SIZE_SMALL, CLASS_ACTIVE, ELEMENT_BOARD_CONTAINER, ELEMENT_CONDITIONS_CONTAINER, ELEMENT_GAME_CONTAINER, ELEMENT_GAME_OPTIONS_BOARD_SIZE, ELEMENT_GAME_OPTIONS_CONTAINER, ELEMENT_GAME_OPTIONS_NUM_PLAYERS, UNIT_BLOCK, UNIT_PIXEL, addConditionInViewableBox, randomNum, randomise, showError, showGameWin, showMessage, startGameMessage;

  ELEMENT_GAME_CONTAINER = $(".game-container");

  ELEMENT_BOARD_CONTAINER = $(".board-container");

  ELEMENT_CONDITIONS_CONTAINER = $(".winning-conditions");

  ELEMENT_GAME_OPTIONS_CONTAINER = $("#gameOptions");

  ELEMENT_GAME_OPTIONS_NUM_PLAYERS = $("#gameOptions .number-players");

  ELEMENT_GAME_OPTIONS_BOARD_SIZE = $("#gameOptions .board-size");

  UNIT_PIXEL = "px";

  UNIT_BLOCK = "block";

  BLOCK_DEFAULT_WIDTH_PIXEL = "100";

  BLOCK_DEFAULT_HEIGHT_PIXEL = "100";

  CLASS_ACTIVE = "active";

  BOARD_SIZE_SMALL = "small";

  BOARD_SIZE_MEDIUM = "medium";

  BOARD_SIZE_LARGE = "large";

  BOARD_SIZE_RANDOM = "random";

  randomNum = function(max, min) {
    if (min == null) {
      min = 0;
    }
    return Math.floor(Math.random() * (max - min) + min);
  };

  randomise = function() {
    var randomNumAlt;
    randomNum = this._randomNum(10);
    return randomNumAlt = this._randomNum(10, 5);
  };

  showGameWin = function() {
    return swal({
      title: "You've Won!",
      type: "success"
    });
  };

  showMessage = function(message) {
    return swal({
      title: "Yes!",
      text: message,
      type: "success"
    });
  };

  showError = function(error) {
    return swal({
      title: "Oops!",
      text: error,
      type: "failure"
    });
  };

  startGameMessage = function() {
    return swal({
      title: "Numero!",
      text: "Do you wanna play?",
      type: "info",
      showCancelButton: true,
      confirmButtonColor: "#5CB85C",
      confirmButtonText: "Let's Play!",
      cancelButtonText: "I don't want to play QQ",
      closeOnConfirm: true,
      closeOnCancel: false
    }, function(isConfirm) {
      if (isConfirm) {
        return $("#gameOptions").modal("show");
      }
    });
  };

  addConditionInViewableBox = function(condition) {
    return ELEMENT_CONDITIONS_CONTAINER.append(condition);
  };

  $(function() {
    return FastClick.attach(document.body);
  });

  $(function() {
    setTimeout((function() {
      return startGameMessage();
    }), 200);
    $("#gameOptions .number-players button").click(function() {
      ELEMENT_GAME_OPTIONS_NUM_PLAYERS.find("." + CLASS_ACTIVE).removeClass(CLASS_ACTIVE);
      return $(this).addClass(CLASS_ACTIVE);
    });
    $("#gameOptions .board-size button").click(function() {
      ELEMENT_GAME_OPTIONS_BOARD_SIZE.find("." + CLASS_ACTIVE).removeClass(CLASS_ACTIVE);
      return $(this).addClass(CLASS_ACTIVE);
    });
    return $(".start-game").click(function() {
      var blockSize, boardSize, dice, diceSize, numberPlayers, sizeX, sizeY, winningConditions;
      boardSize = $(".board-size .active").val();
      numberPlayers = $(".number-players .active").val();
      $("#gameOptions").modal("hide");
      if (Game.prototype.isActiveGame === true) {
        Game.prototype.resetGame();
      }
      Game.prototype.isActiveGame = true;
      Game.prototype.boardSize = boardSize;
      if (boardSize === BOARD_SIZE_MEDIUM) {
        blockSize = new Size(4, 4, UNIT_BLOCK);
      } else if (boardSize === BOARD_SIZE_SMALL) {
        blockSize = new Size(3, 3, UNIT_BLOCK);
      } else if (boardSize === BOARD_SIZE_LARGE) {
        blockSize = new Size(5, 5, UNIT_BLOCK);
      } else {
        sizeX = randomNum(6, 3);
        sizeY = randomNum(6, 3);
        blockSize = new Size(sizeX, sizeY, UNIT_BLOCK);
      }
      Game.prototype.boardSize = blockSize;
      Grid.prototype.createGridStarter(blockSize);
      winningConditions = new WinningConditions();
      winningConditions.addCondition();
      Game.prototype.setWinningConditions(winningConditions);
      diceSize = new Size("25", "25", UNIT_PIXEL);
      dice = new Dice(diceSize);
      Game.prototype.dice = dice;
      console.log(Game.prototype);
      console.log(Grid.prototype);
      return $("body").keyup(function(e) {
        switch (e.keyCode) {
          case 68:
            return Game.prototype.dice.moveRight();
          case 83:
            return Game.prototype.dice.moveDown();
          case 65:
            return Game.prototype.dice.moveLeft();
          case 87:
            return Game.prototype.dice.moveUp();
        }
      });
    });
  });

}).call(this);
